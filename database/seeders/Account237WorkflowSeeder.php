<?php

namespace Database\Seeders;

use App\Models\WorkflowBranch;
use App\Models\WorkflowStep;
use Illuminate\Database\Seeder;

class Account237WorkflowSeeder extends Seeder
{
    public function run(): void
    {
        $workflowId = 237;

        /*โโโโโโโโโโโโโโโโ STEP 1 : root detector โโโโโโโโโโโโโโโโ*/
        $root = WorkflowStep::create([
            'workflow_id' => $workflowId,
            'type'        => 'condition',
            'name'        => 'Detect client message',
            'order'       => 1,
            'config'      => ['condition_type' => 'message_contains'],
        ]);

        /*โโโโโโโโโโโโโโโโ STEP 2-A : ask department selection (interactive) โโ*/
        $askDepartment = WorkflowStep::create([
            'workflow_id'  => $workflowId,
            'type'         => 'action',
            'message_type' => 'interactive',
            'name'         => 'Ask Department Selection',
            'order'        => 2,
            'config'       => json_encode([
                'action'  => 'send_message',
                'message' => 'ูุฑุญุจุงู ุจู! ๐\n\nููู ูููููู ูุณุงุนุฏุชู ุงููููุ \nูุฑุฌู ุงุฎุชูุงุฑ ุงููุณู ุงูููุงุณุจ:',
                'buttons' => [
                    ['type' => 'reply', 'reply' => ['id' => 'sales', 'title' => 'ุงููุจูุนุงุช ๐ผ']],
                    ['type' => 'reply', 'reply' => ['id' => 'support', 'title' => 'ุงูุฏุนู ุงูููู ๐ง']],
                ],
            ]),
        ]);

        /*โโโโโโโโโโโโโโโโ STEP 3-A : check department selection โโโโโโโโโโโโโโโ*/
        $checkDepartment = WorkflowStep::create([
            'workflow_id' => $workflowId,
            'type'        => 'condition',
            'name'        => 'Check Department Selection',
            'order'       => 3,
            'config'      => ['condition_type' => 'message_equals'],
        ]);

        /*โโโโโโโโโโโโโโโโ STEP 3-B : ask service selection for sales (interactive) โโ*/
        $askService = WorkflowStep::create([
            'workflow_id'  => $workflowId,
            'type'         => 'action',
            'message_type' => 'interactive',
            'name'         => 'Ask Service Selection',
            'order'        => 4,
            'config'       => json_encode([
                'action'  => 'send_message',
                'message' => 'ุฃููุงู ูุณููุงู ุจู ูู ูุณู ุงููุจูุนุงุช! ๐ผ\n\nูุฑุฌู ุงุฎุชูุงุฑ ุงูุฎุฏูุฉ ุงูุชู ุชุญุชุงุฌูุง:',
                'buttons' => [
                    ['type' => 'reply', 'reply' => ['id' => 'sms', 'title' => 'ุฎุฏูุฉ ุงูุฑุณุงุฆู ุงููุตูุฉ ๐ฑ']],
                    ['type' => 'reply', 'reply' => ['id' => 'otp', 'title' => 'ุฎุฏูุฉ OTP ๐']],
                    ['type' => 'reply', 'reply' => ['id' => 'whatsapp', 'title' => 'ุฎุฏูุฉ ุงููุงุชุณุงุจ ๐']],
                ],
            ]),
        ]);

        /*โโโโโโโโโโโโโโโโ STEP 4-A : check service selection โโโโโโโโโโโโโโโ*/
        $checkService = WorkflowStep::create([
            'workflow_id' => $workflowId,
            'type'        => 'condition',
            'name'        => 'Check Service Selection',
            'order'       => 5,
            'config'      => ['condition_type' => 'message_equals'],
        ]);

        /*โโโโโโโโโโโโโโโโ STEP 4-B : explain SMS service โโโโโโโโโโโโโโโ*/
        $explainSMS = WorkflowStep::create([
            'workflow_id'  => $workflowId,
            'type'         => 'action',
            'message_type' => 'text',
            'name'         => 'Explain SMS Service',
            'order'        => 6,
            'config'       => json_encode([
                'action'   => 'send_message',
                'message'  => '๐ฑ **ุฎุฏูุฉ ุงูุฑุณุงุฆู ุงููุตูุฉ (SMS)**\n\n' .
                             'ุชููุฑ ูู ุฎุฏูุฉ ุงูุฑุณุงุฆู ุงููุตูุฉ ุฅููุงููุฉ ุฅุฑุณุงู ุงูุฑุณุงุฆู ุงููุตูุฑุฉ ุฅูู ุนููุงุฆู ุจุดูู ููุฑู ูููุซูู.\n\n' .
                             'โจ **ูููุฒุงุช ุงูุฎุฏูุฉ:**\n' .
                             'โข ุฅุฑุณุงู ุฑุณุงุฆู ุฌูุงุนูุฉ\n' .
                             'โข ุชุบุทูุฉ ูุญููุฉ ูุนุงูููุฉ\n' .
                             'โข ุชูุงุฑูุฑ ููุตูุฉ ุนู ุญุงูุฉ ุงูุชุณููู\n' .
                             'โข ุฃุณุนุงุฑ ุชูุงูุณูุฉ\n' .
                             'โข ูุงุฌูุฉ ุจุฑูุฌุฉ ุชุทุจููุงุช ุณููุฉ ุงูุงุณุชุฎุฏุงู\n\n' .
                             '๐ฐ **ุงูุฃุณุนุงุฑ ุชุจุฏุฃ ูู 0.05 ุฑูุงู ููุฑุณุงูุฉ ุงููุงุญุฏุฉ**\n\n' .
                             'ููุฒูุฏ ูู ุงูุชูุงุตูู ุฃู ูุจุฏุก ุงูุฎุฏูุฉุ ุชูุงุตู ูุน ูุฑูู ุงููุจูุนุงุช. ๐',
                'complete' => true,
            ]),
        ]);

        /*โโโโโโโโโโโโโโโโ STEP 4-C : explain OTP service โโโโโโโโโโโโโโโ*/
        $explainOTP = WorkflowStep::create([
            'workflow_id'  => $workflowId,
            'type'         => 'action',
            'message_type' => 'text',
            'name'         => 'Explain OTP Service',
            'order'        => 7,
            'config'       => json_encode([
                'action'   => 'send_message',
                'message'  => '๐ **ุฎุฏูุฉ ุฑูุฒ ุงูุชุญูู (OTP)**\n\n' .
                             'ุฎุฏูุฉ ุขููุฉ ููุชูุฏูุฉ ูุญูุงูุฉ ุญุณุงุจุงุช ุงููุณุชุฎุฏููู ูู ุฎูุงู ุฅุฑุณุงู ุฑููุฒ ุงูุชุญูู ุงูููุฑู.\n\n' .
                             '๐ก๏ธ **ูููุฒุงุช ุงูุฎุฏูุฉ:**\n' .
                             'โข ุฃูุงู ุนุงูู ุงููุณุชูู\n' .
                             'โข ุณุฑุนุฉ ูู ุงูุชุณููู (ุฃูู ูู 30 ุซุงููุฉ)\n' .
                             'โข ุฏุนู ูุชุนุฏุฏ ุงููููุงุช (SMS, Voice, WhatsApp)\n' .
                             'โข ุญูุงูุฉ ุถุฏ ุงูุงุญุชูุงู ูุงููุฌูุงุช\n' .
                             'โข ุชุฎุตูุต ููุงูุจ ุงูุฑุณุงุฆู\n' .
                             'โข ุชูุงุฑูุฑ ุชูุตูููุฉ\n\n' .
                             '๐ฐ **ุงูุฃุณุนุงุฑ ุชุจุฏุฃ ูู 0.08 ุฑูุงู ููู ุนูููุฉ ุชุญูู**\n\n' .
                             '๐ฏ **ููุงุณุจ ูููุตุงุฑูุ ุงูุชุทุจููุงุชุ ุงูููุงูุน ุงูุฅููุชุฑูููุฉ**\n\n' .
                             'ููุฒูุฏ ูู ุงูุชูุงุตูู ุฃู ูุจุฏุก ุงูุฎุฏูุฉุ ุชูุงุตู ูุน ูุฑูู ุงููุจูุนุงุช. ๐',
                'complete' => true,
            ]),
        ]);

        /*โโโโโโโโโโโโโโโโ STEP 4-D : explain WhatsApp service โโโโโโโโโโโโโโโ*/
        $explainWhatsApp = WorkflowStep::create([
            'workflow_id'  => $workflowId,
            'type'         => 'action',
            'message_type' => 'text',
            'name'         => 'Explain WhatsApp Service',
            'order'        => 8,
            'config'       => json_encode([
                'action'   => 'send_message',
                'message'  => '๐ **ุฎุฏูุฉ ุงููุงุชุณุงุจ ููุฃุนูุงู (WhatsApp Business)**\n\n' .
                             'ุชูุงุตู ูุน ุนููุงุฆู ุจุทุฑููุฉ ุฃูุซุฑ ุชูุงุนูุงู ูู ุฎูุงู ููุตุฉ ุงููุงุชุณุงุจ ุงูุฑุณููุฉ ููุฃุนูุงู.\n\n' .
                             '๐ **ูููุฒุงุช ุงูุฎุฏูุฉ:**\n' .
                             'โข ุฑุณุงุฆู ูุตูุฉ ูุตูุฑ ูููุฏูููุงุช\n' .
                             'โข ููุงูุจ ุฑุณุงุฆู ูุนุชูุฏุฉ ูู ูุงุชุณุงุจ\n' .
                             'โข ุฑุณุงุฆู ุชูุงุนููุฉ ูุน ุฃุฒุฑุงุฑ\n' .
                             'โข ุฏุนู ุงูุฑุณุงุฆู ุงูุฌูุงุนูุฉ\n' .
                             'โข ุชูุงุฑูุฑ ููุตูุฉ ุนู ูุนุฏู ุงููุตูู ูุงููุฑุงุกุฉ\n' .
                             'โข ุฏุนู ูุชุนุฏุฏ ุงููุบุงุช\n' .
                             'โข ุฑุจุท ูุน ุฃูุธูุฉ CRM\n\n' .
                             '๐ฐ **ุงูุฃุณุนุงุฑ:**\n' .
                             'โข ุฑุณุงุฆู ุงูุฎุฏูุฉ: 0.12 ุฑูุงู\n' .
                             'โข ุฑุณุงุฆู ุงููุญุงุฏุซุฉ: 0.08 ุฑูุงู\n' .
                             'โข ุฑุณุงุฆู ุงูุชุณููู: 0.20 ุฑูุงู\n\n' .
                             '๐ **ูุนุฏู ูุชุญ 95% - ุฃุนูู ูู ุงูุจุฑูุฏ ุงูุฅููุชุฑููู ูุงูุฑุณุงุฆู ุงููุตูุฉ**\n\n' .
                             'ููุฒูุฏ ูู ุงูุชูุงุตูู ุฃู ูุจุฏุก ุงูุฎุฏูุฉุ ุชูุงุตู ูุน ูุฑูู ุงููุจูุนุงุช. ๐',
                'complete' => true,
            ]),
        ]);

        /*โโโโโโโโโโโโโโโโ STEP 3-C : support message โโโโโโโโโโโโโโโ*/
        $supportMessage = WorkflowStep::create([
            'workflow_id'  => $workflowId,
            'type'         => 'action',
            'message_type' => 'text',
            'name'         => 'Support Message',
            'order'        => 9,
            'config'       => json_encode([
                'action'   => 'send_message',
                'message'  => '๐ง **ูุฑุญุจุงู ุจู ูู ูุณู ุงูุฏุนู ุงูููู!**\n\n' .
                             'ูุญู ููุง ููุณุงุนุฏุชู ูู ุญู ุฃู ูุดููุฉ ุชูููุฉ ูุฏ ุชูุงุฌููุง.\n\n' .
                             '๐ **ุฎุฏูุงุช ุงูุฏุนู ุงูููู:**\n' .
                             'โข ุญู ุงููุดุงูู ุงูุชูููุฉ\n' .
                             'โข ูุณุงุนุฏุฉ ูู ุงูุชูุงูู ูุน API\n' .
                             'โข ุฏุนู ุงูุฅุนุฏุงุฏุงุช ูุงูุชูููู\n' .
                             'โข ุงุณุชูุดุงู ุงูุฃุฎุทุงุก ูุฅุตูุงุญูุง\n' .
                             'โข ุงูุชุฏุฑูุจ ุนูู ุงุณุชุฎุฏุงู ุงููุธุงู\n\n' .
                             'โฐ **ุฃููุงุช ุงูุนูู:** ูู ุงูุฃุญุฏ ุฅูู ุงูุฎููุณุ 9 ุตุจุงุญุงู - 6 ูุณุงุกู\n\n' .
                             '๐ **ููุญุตูู ุนูู ุฏุนู ููุฑู:**\n' .
                             'โข ุงููุงุชู: 920000000\n' .
                             'โข ุงูุจุฑูุฏ ุงูุฅููุชุฑููู: support@company.com\n' .
                             'โข ุชุฐูุฑุฉ ุฏุนู: portal.company.com\n\n' .
                             'ุณูุชู ุงูุฑุฏ ุนููู ูู ุฃูุฑุจ ููุช ูููู. ุดูุฑุงู ูู! ๐',
                'complete' => true,
            ]),
        ]);

        /*โโโโโโโโโโโโโโโโ STEP 99 : END WORKFLOW โโโโโโโโโโโโโโ*/
        $end = WorkflowStep::create([
            'workflow_id'  => $workflowId,
            'type'         => 'action',
            'message_type' => 'text',
            'name'         => 'End Workflow',
            'config'       => ['action' => 'noop', 'message' => 'ุณูู ูุชู ุงูุฑุฏ ุนููู ูู ุฃุณุฑุน ููุช'],
            'order'        => 99,
        ]);

        /*โโโโโโโโโโโโโโโโโโ BRANCHES CONFIGURATION โโโโโโโโโโโโโโโโโโ*/

        // Root to department selection (always)
        WorkflowBranch::insert([
            [
                'parent_step_id'  => $root->id,
                'child_step_id'   => $askDepartment->id,
                'condition_type'  => 'always',
                'condition_value' => null,
            ],
        ]);

        // Department selection to service selection or support
        WorkflowBranch::insert([
            [
                'parent_step_id'  => $askDepartment->id,
                'child_step_id'   => $checkDepartment->id,
                'condition_type'  => 'always',
                'condition_value' => null,
            ],
        ]);

        // Check department branches
        WorkflowBranch::insert([
            [
                'parent_step_id'  => $checkDepartment->id,
                'child_step_id'   => $askService->id,
                'condition_type'  => 'if',
                'condition_value' => json_encode(['type' => 'equals', 'value' => 'sales']),
            ],
            [
                'parent_step_id'  => $checkDepartment->id,
                'child_step_id'   => $supportMessage->id,
                'condition_type'  => 'if',
                'condition_value' => json_encode(['type' => 'equals', 'value' => 'support']),
            ],
            [
                'parent_step_id'  => $checkDepartment->id,
                'child_step_id'   => $end->id,
                'condition_type'  => 'else',
                'condition_value' => null,
            ],
        ]);

        // Service selection to service check
        WorkflowBranch::insert([
            [
                'parent_step_id'  => $askService->id,
                'child_step_id'   => $checkService->id,
                'condition_type'  => 'always',
                'condition_value' => null,
            ],
        ]);

        // Check service branches
        WorkflowBranch::insert([
            [
                'parent_step_id'  => $checkService->id,
                'child_step_id'   => $explainSMS->id,
                'condition_type'  => 'if',
                'condition_value' => json_encode(['type' => 'equals', 'value' => 'sms']),
            ],
            [
                'parent_step_id'  => $checkService->id,
                'child_step_id'   => $explainOTP->id,
                'condition_type'  => 'if',
                'condition_value' => json_encode(['type' => 'equals', 'value' => 'otp']),
            ],
            [
                'parent_step_id'  => $checkService->id,
                'child_step_id'   => $explainWhatsApp->id,
                'condition_type'  => 'if',
                'condition_value' => json_encode(['type' => 'equals', 'value' => 'whatsapp']),
            ],
            [
                'parent_step_id'  => $checkService->id,
                'child_step_id'   => $end->id,
                'condition_type'  => 'else',
                'condition_value' => null,
            ],
        ]);

        // End connections for complete workflows
        WorkflowBranch::insert([
            [
                'parent_step_id'  => $explainSMS->id,
                'child_step_id'   => $end->id,
                'condition_type'  => 'always',
                'condition_value' => null,
            ],
            [
                'parent_step_id'  => $explainOTP->id,
                'child_step_id'   => $end->id,
                'condition_type'  => 'always',
                'condition_value' => null,
            ],
            [
                'parent_step_id'  => $explainWhatsApp->id,
                'child_step_id'   => $end->id,
                'condition_type'  => 'always',
                'condition_value' => null,
            ],
            [
                'parent_step_id'  => $supportMessage->id,
                'child_step_id'   => $end->id,
                'condition_type'  => 'always',
                'condition_value' => null,
            ],
        ]);
    }
}
